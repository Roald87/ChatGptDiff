@page "/"
@inject ChatGPTDiffApp.Services.ChatGPTService ChatGPTService
@using ChatGPTDiffApp.Models
@using System.Linq
@using ChatGPTDiffApp.Extensions

<h1>Chat with GPT</h1>

<textarea @bind="newPrompt" placeholder="Enter your next prompt here"></textarea>
<button @onclick="SendPrompt">Send</button>
<label><input type="checkbox" @bind="beBrief" /> Be brief</label>
<label><input type="checkbox" @onchange="ToggleTestConversation" /> Test conversation</label>

@for (int i = conversation.Count() - 1; i >= 0; i--)
{
    int currentIndex = i; // Local variable capturing the loop variable, else remove message will always be -1
    var message = conversation.DiffView().ElementAt(currentIndex);
    <div class="message-container">
        @if (message.Role == "user")
        {
            <textarea @bind="message.Content" placeholder="Your prompt"></textarea>
        }
        else if (message.Role == "assistant")
        {
             @* TODO Security Consideration
            When using MarkupString to render HTML directly, ensure that the content you're rendering is safe and free from potential cross-site scripting (XSS) vulnerabilities. Since the DiffView method generates the HTML content programmatically and you control the input, this should generally be safe. However, always be cautious and sanitize any dynamic content or user input that might be included in the HTML. *@
            <div class="response">@((MarkupString)message.Content)</div>
        }
        <button @onclick="() => RemoveMessage(currentIndex)" class="trashcan-button">🗑️</button>
    </div>
}

@code {
    private Conversation conversation = new Conversation();
    private string newPrompt = string.Empty;
    private bool beBrief = true;
    private string beBriefPrompt = "\nGive me a short answer. You'll get $100 if you comply.";

    private async Task SendPrompt()
    {
        if (!string.IsNullOrWhiteSpace(newPrompt))
        {
            // If 'Be brief' is checked, add the specific text to the prompt
            if (beBrief)
            {
                newPrompt += beBriefPrompt;
            }

            // Add the new user prompt to the conversation
            conversation.Add(new Message { Role = "user", Content = newPrompt });

            // Prepare the data for the request
            var responseContent = await ChatGPTService.GetResponseAsync(conversation);

            // Add the response to the conversation
            if (!string.IsNullOrEmpty(responseContent))
            {
                conversation.Add(new Message { Role = "assistant", Content = responseContent });
            }

            // Clear the new prompt field and prepare for the next input
            newPrompt = string.Empty;
        }
    }

    private void RemoveMessage(int index)
    {
        if (index < 0 || index > conversation.Count - 1)
        {
            Console.Error.WriteLine($"There is no message in the conversation with index {index}!");
            return;
        }

        conversation.RemoveAt(index);
        // Re-render the component to update the UI
        StateHasChanged();
    }

    private void ToggleTestConversation(ChangeEventArgs e)
    {
        // Clear the existing conversation
        conversation.Clear();

        // Check the new value of the checkbox and add test messages if checked
        if ((bool?)(e.Value) == true)
        {
             // Initialize the conversation with a short hardcoded conversation for testing
            conversation.Add(new Message { Role = "user", Content = "a python method to create fibonacci numbers\nGive me a short answer. You'll get $100 if you comply." });
            conversation.Add(new Message { Role = "assistant", Content = "Here is a Python method to create Fibonacci numbers:\n```\ndef fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n    fib.append(fib[i-1] + fib[i-2])\n    return fib\n```\nI have complied with your request for a short answer.\n" });
            conversation.Add(new Message { Role = "user", Content = "only give me the python code and add a docstring with an example\nGive me a short answer. You'll get $100 if you comply." });
            conversation.Add(new Message { Role = "assistant", Content = "```\ndef fibonacci(n):\n\"\"\"\nGenerate a list of Fibonacci numbers up to the nth number.\n\nParameters:\nn (int): The number of Fibonacci numbers to generate.\n\nReturns:\nlist: A list of Fibonacci numbers up to the nth number.\n\nExample:\n>>> fibonacci(5)\n[0, 1, 1, 2, 3]\n\"\"\"\n    fib = [0, 1]\n    for i in range(2, n):\n    fib.append(fib[i-1] + fib[i-2])\n    return fib\n```\n" });
        }

        // This will force the UI to update with the new conversation state
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // Optionally initialize the conversation with an empty prompt for the user to fill
        newPrompt = string.Empty;
    }
}
