@page "/"
@inject ChatGPTDiffApp.Services.ChatGPTService ChatGPTService
@using System.Linq
@using DiffPlex.DiffBuilder.Model
@using ChatGPTDiffApp.Models

<h1>Chat with GPT</h1>


@if (isLoading)
{
    <div class="loader"></div>
}
else
{
    @* TODO: make prompt window equally wide as the response *@
    <textarea @bind="newPrompt" placeholder="Enter your next prompt here"></textarea>
    <button @onclick="SendPrompt">Send</button>
}

<label><input type="checkbox" @bind="beBrief" /> Be brief</label>
<label><input type="checkbox" @onchange="ToggleTestConversation" /> Test conversation</label>
<label><input type="checkbox" @bind="showDiffView" /> Show Diff View</label>

@{
// TODO: white lines seem to be removed
// TODO: add copy that copies the content
// TODO: remove code ticks is present
// TODO: save conversation, only remove when user presses button
// TODO: confirmation on removing (part of) the conversation
}

@for (int i = conversation.Count() - 1; i >= 0; i--)
{
    int currentIndex = i; // Local variable capturing the loop variable, else currentIndex in RemoveMessage(currentIndex) is always -1
    var message = conversation.NormalView().ElementAt(currentIndex);
    <div class="message-container">
        @if (message.Role == "user")
        {
            <textarea @bind="message.Content" placeholder="Your prompt"></textarea>
        }
        else if (message.Role == "assistant")
        {
            if (showDiffView)
            {
                DiffMessage dm = conversation.DiffView().ElementAt(currentIndex);
                <div class="response">
                    @{
                        foreach (var diffMessage in dm.Diff.Lines)
                        {
                            <div class="@GetDiffClass(diffMessage.Type)">@diffMessage.Text</div>
                        }
                    }
                </div>
            }
            else
            {
                <div class="response">@message.Content</div>
            }

        }
        <button @onclick="() => RemoveMessage(currentIndex)" class="trashcan-button">🗑️</button>
    </div>
}


@code {
    private Conversation conversation = new Conversation();
    private string newPrompt = string.Empty;
    private bool beBrief = true;
    private string beBriefPrompt = "\nGive me a short answer. You'll get $100 if you comply.";
    private bool isLoading;
    private bool showDiffView = true;


    private async Task SendPrompt()
    {
        if (!string.IsNullOrWhiteSpace(newPrompt))
        {
            isLoading = true;

            if (beBrief)
            {
                newPrompt += beBriefPrompt;
            }

            conversation.Add(UserMessage.Create(newPrompt));

            var responseContent = await ChatGPTService.GetResponseAsync(conversation);

            if (!string.IsNullOrEmpty(responseContent))
            {
                conversation.Add(AssistantMessage.Create(responseContent));
            }

            newPrompt = string.Empty;
            isLoading = false;
        }
    }

    private void RemoveMessage(int index)
    {
        if (index < 0 || index > conversation.Count - 1)
        {
            Console.Error.WriteLine($"There is no message in the conversation with index {index}!");
            return;
        }

        conversation.RemoveAt(index);
        // Re-render the component to update the UI
        StateHasChanged();
    }

    private void ToggleTestConversation(ChangeEventArgs e)
    {
        // Clear the existing conversation
        conversation.Clear();

        // Check the new value of the checkbox and add test messages if checked
        if ((bool?)(e.Value) == true)
        {
             // Initialize the conversation with a short hardcoded conversation for testing
            conversation.Add(UserMessage.Create("a python method to create fibonacci numbers\nGive me a short answer. You'll get $100 if you comply."));
            conversation.Add(AssistantMessage.Create("Here is a Python method to create Fibonacci numbers:\n```\ndef fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib\n```\nI have complied with your request for a short answer.\n"));
            conversation.Add(UserMessage.Create("only give me the python code and add a docstring with an example\nGive me a short answer. You'll get $100 if you comply."));
            conversation.Add(AssistantMessage.Create("```\ndef fibonacci(n):\n\"\"\"\nGenerate a list of Fibonacci numbers up to the nth number.\n\nParameters:\nn (int): The number of Fibonacci numbers to generate.\n\nReturns:\nlist: A list of Fibonacci numbers up to the nth number.\n\nExample:\n>>> fibonacci(5)\n[0, 1, 1, 2, 3]\n\"\"\"\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib\n```\n" ));
        }

        // This will force the UI to update with the new conversation state
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // Optionally initialize the conversation with an empty prompt for the user to fill
        newPrompt = string.Empty;
    }

    private string GetDiffClass(ChangeType type)
    {
        return type switch
        {
            ChangeType.Inserted => "diff-line diff-inserted",
            ChangeType.Deleted => "diff-line diff-deleted",
            _ => "diff-line"
        };
    }
}
